#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require('fs');
const path = require('path');
const { createServer } = require('http');

const debug = require('debug')('createServer');
const { sequelize } = require('../models');
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Normalize a port into a number, string, or false.
 */
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = createServer(app);

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Listen on provided port, on all network interfaces.
 */

sequelize
  .sync({alter: true})
  .then(() => {
    server.listen(port, () => {
      const avatarsFolderPath = path.join(process.cwd(), 'media', 'avatars');
      fs.mkdir(avatarsFolderPath, { recursive: true }, (error) => console.log(error));
      const imagesFolderPath = path.join(process.cwd(), 'media', 'images');
      fs.mkdir(imagesFolderPath, { recursive: true }, (error) => console.log(error));
    });
    const io = require('../socket').init(server);

    let registeredUser = [];
    let unregisteredUser = [];

    const addUsers = (userId, socketId) => {
      !registeredUser.some((user) => user.userId === userId) &&
        registeredUser.push({ userId, socketId });
    };

    const getUser = (userId) => {
      const user = registeredUser.find((user) => user.userId === userId);
      return user;
    };

    const removeUser = (socketId) => {
      registeredUser = registeredUser.filter(
        (user) => user.socketId !== socketId
      );
    };
    io.on('connection', (socket) => {
      socket.on('user', (userId) => {
        if (userId) {
          addUsers(userId, socket.id);
          io.emit('users', registeredUser);
        }
      });

      // send and get message

      socket.on('sendMessage', ({ sender, receiver, message }) => {
        const user = getUser(receiver);
        if (user) {
          io.to(user.socketId).emit('getMessage', {
            sender,
            message,
            createdAt: new Date(),
          });
        }
      });
      // disconnection
      socket.on('disconnect', () => {
        removeUser(socket.id);
        io.emit('users', registeredUser);
      });
    });
  })
  .catch((error) => console.log('Database connection error', error));
server.on('error', onError);
server.on('listening', onListening);
